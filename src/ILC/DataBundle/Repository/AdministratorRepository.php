<?php
namespace ILC\DataBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\NoResultException;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;

/**
 * AdministratorRepository
 * This class was generated by the Doctrine ORM.
 * Add your own custom
 * repository methods below.
 */
class AdministratorRepository extends EntityRepository implements UserProviderInterface, UserLoaderInterface
{

	public function loadUserByUsername($username, $cache = true)
	{
		$qb = $this->createQueryBuilder('u')->select('u')->where('u.username = :username OR u.email = :email')->setParameter('username', $username)->setParameter('email', $username);
		$query = $qb->getQuery();

		if ($cache) {
			$query->setCacheable('true')->useQueryCache(true)->setLifetime(60)->useResultCache(true, 60);
		}

		try {
			$user = $query->getSingleResult();
		} catch (NoResultException $e) {
			$exp = new UsernameNotFoundException(sprintf('Unable to find an active User identified by "%s".', $username), 0, $e);
			$exp->setUsername($username);
			throw $exp;
		}

		return $user;
	}

	public function refreshUser(UserInterface $user)
	{
		$class = get_class($user);
		if (!$this->supportsClass($class)) {
			throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
		}

		return $this->loadUserByUsername($user->getUsername());
	}

	public function supportsClass($class)
	{
		return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
	}

	public function getAllQuery($cache = true)
	{
		$dql = 'SELECT a FROM ILC\DataBundle\Entity\Administrator a ' . 'ORDER BY a.dtcrea DESC';
		$query = $this->getEntityManager()->createQuery($dql);
		if ($cache) {
			$query->setCacheable('true')->useQueryCache(true)->setLifetime(60)->useResultCache(true, 60);
		}
		return $query;
	}

	public function getAll($cache = true)
	{
		$query = $this->getAllQuery($cache);
		return $query->getResult();
	}
}
